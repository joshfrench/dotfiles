set nocompatible                          " be vIMproved!

set rtp+=/usr/local/opt/fzf
runtime macros/matchit.vim

" VIM UI
scriptencoding utf-8
set background=dark                       " assume dark BG
set shortmess+=filmnrxoOtT                " shorter messages & prompts
set viewoptions=folds,options,cursor,unix,slash " unix compat
set virtualedit=onemore                   " allow cursor past EOL
set history=1000
set spell
set hidden                                " switch buffers w/out save
set switchbuf=usetab,newtab               " open buffers in tabs
set splitright
set splitbelow
set cursorline
set tabpagemax=15                         " max 15 tabs
set updatetime=250

colorscheme solarized
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="low"

" Toggle relative numbers by mode
set rnu
set nu
autocmd InsertEnter * :set nornu
autocmd InsertLeave * :set rnu

" Statusline
set laststatus=2                          " status bar in all modes
set noshowmode                            " already displayed in statusline

set clipboard=unnamed                     " use system clipboard
set backspace=indent,eol,start            " backspace ALL the things!
nmap <silent> <leader>v :set invpaste<CR> " Toggle paste with extra verbosity (since showcmd is off)
imap <leader>v <C-O>:set paste<CR>
set pastetoggle=<leader>v
set showmatch                             " hl matching pairs
set incsearch                             " search as you type
set hlsearch                              " hl search terms
set ignorecase                            " ignore case when searching
set smartcase                             " case-sensitive IF uppercase present
set wildmenu                              " show list instead of autocomplete
set wildmode=list:longest,full            " wildmenu completion options
set wildignore+=*/tmp/*,*/sourcemaps/*,*/node_modules/*    " ignore some junk
set whichwrap=b,s,h,l,<,>,[,]             " motion keys can wrap on line ends
set scrolljump=5                          " how far to scroll when cursor leaves screen
set scrolloff=3                           " keep X lines above/below cursor
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " highlight whitespace
set nobackup                              " stop with this nonsense
set noswapfile
set undofile                              " peristent undo is nice though
set undodir=~/.vim/undo
set undolevels=1000
set undoreload=10000
set ttimeoutlen=0                         " no delay when <esc> exits imode

" Formatting
set nowrap                                " don't soft-wrap text
set autoindent                            " match indentation of prev line
set shiftwidth=2                          " tabstop to use when reindenting
set shiftround                            " round to shiftwidth when realigning
set tabstop=2
set softtabstop=2
set expandtab                             " use spaces when hitting TAB
set nojoinspaces                          " prevent extra spaces when joining with J

" Key mappings
map <S-H> gT                              " easy tab navigation
map <S-L> gt

" Typo fixes
command! -bang -nargs=* -complete=file E e<bang> <args>
command! -bang -nargs=* -complete=file W w<bang> <args>
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
cmap Tabe tabe

nnoremap Y y$                             " consistent with C and D behavior

" toggle search highlighting
nmap <silent> <leader><space> :set invhlsearch<CR>

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" search with regexps
nnoremap / /\v
vnoremap / /\v
nnoremap <leader>A :Ag 

" PLUGINS
" NERDtree
map <C-e> :NERDTreeTabsToggle<CR>
map <leader>e :NERDTreeFind<CR>

let NERDTreeIgnore=['\~$', '\.swo$', '\.swp$', '\.git']
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=0
let NERDTreeMinimalUI=1
let NERDTreeChDirMode=1
let NERDTreeQuitOnOpen=1
let g:nerdtree_tabs_focus_on_files=1

" fzf
let g:fzf_layout = { 'down': '~20%' }
map <C-t> :Files<CR>

" TComment
" Remap to old TextMate binding
let g:tcomment_mapleader1='<C-\>'

" Lightline
let s:medium = 120

function! NoNerd(status)
  let fname = expand('%:t')
  return fname =~ 'NERD_tree' ? '' : a:status
endfunction

function! LightlineFilename()
  let filename = winwidth(0) > s:medium ? expand('%') : expand('%:t')
  return NoNerd(filename)
endfunction

function! LightlinePWD()
  let pwd = winwidth(0) > s:medium ? fnamemodify(getcwd(), ':t') : ''
  return NoNerd(pwd)
endfunction

function LightlineBranch()
  return NoNerd(fugitive#head())
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:all_non_errors == 0 ? '' : printf('<%d>', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  return l:all_errors == 0 ? '' : printf('<%d>', all_errors)
endfunction

function! LightlineMode()
  return NoNerd(lightline#mode())
endfunction

function! LightlinePercent()
  return NoNerd('%3p%%')
endfunction

function! LightlineFT()
  return NoNerd('%{&ft!=#""?&ft:"no ft"}')
endfunction

function! LightlineLineInfo()
  return NoNerd('%3l:%-2v')
endfunction

let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left':  [ ['mode', 'paste'], ['pwd', 'gitbranch', 'filename'] ],
      \   'right': [ ['linter_warnings', 'linter_errors', 'lineinfo'], ['percent'], ['filetype'] ]
      \ },
      \ 'component_function': {
      \   'mode': 'LightlineMode',
      \   'gitbranch': 'LightlineBranch',
      \   'pwd': 'LightlinePWD',
      \   'filename': 'LightlineFilename',
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'percent': 'LightlinePercent',
      \   'filetype': 'LightlineFT',
      \   'lineinfo': 'LightlineLineInfo'
      \ },
      \ 'component_type': {
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error'
      \ }
\ }

" ALE
let g:ale_linters = {
      \ 'javascript': ['eslint']
      \ }

let g:ale_sign_error = '>>'
let g:ale_sign_warning = '<>'
let g:lightline#ale#indicator_errors = 'E:'
let g:lightline#ale#indicator_warnings = 'W:'
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
hi link ALEErrorSign DiffDelete
hi link ALEWarningSign DiffChange

" Closetag
let g:closetag_filenames = '*.html,*.xhtml,*.js,*.jsx'
let g:closetag_filetypes = 'html,xhtml,js,jsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.js,*.jsx'
let g:closetag_xhtml_filetypes = 'xhtml,js,jsx'
let g:closetag_emptyTags_caseSensitive = 1

" MatchTagAlways
let g:mta_filetypes = {
 \ 'javascript.jsx': 1,
 \ 'html' : 1,
 \ 'xhtml' : 1,
 \ 'xml' : 1
\ }

" Emmet
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
\}

" Markdown
let g:vim_markdown_folding_disabled = 1

" DelimitMate
let delimitMate_excluded_ft = "clojure"
let delimitMate_expand_cr = 2            " inside parens, <CR> expands to newlines (preserving text on current line)
let delimitMate_expand_space = 1         " inside parens, <SPACE> expands
let delimitMate_jump_expansion = 1       " if there's already a closing paren, jump over it rather than adding another

" Rainbow Parentheses
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#colors = {
  \ 'dark': [
  \   [4,'blue'],
  \   [6,'cyan'],
  \   [2,'green'],
  \   [3,'yellow'],
  \   [1,'red'],
  \   [5,'darkmagenta'],
  \   [13,'magenta'],
  \ ]
\}

augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

" Clojure
let g:clojure_fuzzy_indent = 1
let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let',
                                      \ '^fnk', '^dfnk',
                                      \ '^query', '^render', '^params', '^ident'
                                      \ ]
"let g:clojure_fuzzy_indent_blacklist = ['-fn$', '^with-%(meta|out-str|loading-context)$']
let g:clojure_align_multiline_strings = 1
" add Om keywords
let g:clojure_syntax_keywords = {
      \ 'clojuremacro': ["defui"]
\ }

" Stuff that likes to be at the bottom
syntax on                                 " syntax highlighting
filetype plugin indent on                 " auto detect filetypes
hi CursorLineNr ctermbg=0 ctermfg=14
hi MatchParen cterm=bold ctermfg=15 ctermbg=10
